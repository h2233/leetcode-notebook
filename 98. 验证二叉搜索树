/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isValidBST(TreeNode root) {
        List<Integer> ret = new ArrayList<>();
        dnf(ret,root);
        for(int i = 1;i < ret.size();i++){
            if(ret.get(i) <= ret.get(i - 1)) return false;
        }
        return true;
    }
    public List<Integer> dnf(List<Integer> list,TreeNode root){
        if(root == null) return null;
        List<Integer> ret = list;
        dnf(ret,root.left);
        ret.add(root.val);
        dnf(ret,root.right);
        return ret;
    }
}
//官解
class Solution {
    public boolean isValidBST(TreeNode root) {
        return isValidBST(root, Long.MIN_VALUE, Long.MAX_VALUE);
    }

    public boolean isValidBST(TreeNode node, long lower, long upper) {
        if (node == null) {
            return true;
        }
        if (node.val <= lower || node.val >= upper) {
            return false;
        }
        return isValidBST(node.left, lower, node.val) && isValidBST(node.right, node.val, upper);
    }
}
//改进
class Solution {
    static long pre = Long.MIN_VALUE;
    public boolean isValidBST(TreeNode root){
        if(dnf(root)) return true;
        return false;
    }
    public boolean dnf(TreeNode root){
        boolean p1 = true,p2 = true,p3 = true;
        if(root == null) return true;
        p1 = dnf(root.left);
        p2 = pre < root.val;
        pre = root.val;
        p3 = dnf(root.right);
        return p1 && p2 && p3; 
    }
}
