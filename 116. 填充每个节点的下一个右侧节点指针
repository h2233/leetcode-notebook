/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        return dnf(root);
    }
    public Node dnf(Node root){
        if(root == null) return null;
        if(root.left != null) root.left.next = root.right;
        if(root.right != null && root.next != null) root.right.next = root.next.left;
        dnf(root.left);
        dnf(root.right);
        return root;
    }
}
//另一种写法
class Solution {
    public Node connect(Node root) {
        Queue<Node> que = new LinkedList<>();
        que.add(root);
        while (que.size() > 0){
            for(int n = que.size() - 1,i = 0;i <= n;i++) {
                Node tmp = que.poll();
                if (tmp != null) {
                    if(i < n) tmp.next = que.element();
                    que.add(tmp.left);
                    que.add(tmp.right);
                }
            }
        }
        return root;
    }
}
