/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 //抄官方的  Morris 中序遍历
class Solution {
    public void recoverTree(TreeNode root) {
        TreeNode x=null,y=null,pre=null,poress=null;
        while(root != null){
            if(root.left != null){
                poress = root.left;
                while(poress.right != null && poress.right != root){
                    poress = poress.right;
                }
                if(poress.right == null){
                    poress.right = root;
                    root = root.left;
                }
                else{
                    if(pre != null && pre.val > root.val){
                        y = root;
                        if(x==null){
                            x = pre;
                        }
                    }
                    pre = root;
                    root = root.right;
                    poress.right = null;
                }
            }
            else{
                if(pre != null && pre.val > root.val){
                    y = root;
                    if(x==null){
                        x=pre;
                    }
                }
                pre = root;
                root = root.right;
            }
        }
        swap(x,y);
    }
    public void swap(TreeNode x ,TreeNode y){
        int tmp = x.val;
        x.val = y.val;
        y.val = tmp;
    }
}
