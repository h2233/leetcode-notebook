/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/
class Solution {
    public Node connect(Node root) {
        Node head = root;
        while(head != null){
            Node tmp = head;
            Node pre = tmp;
            while(tmp != null){
                if(tmp.left != null && tmp.right != null){
                    tmp.left.next = tmp.right;
                }
                if(tmp.right != null || tmp.left != null){
                    pre = tmp.next;
                    while(pre != null){
                        if(pre.left != null || pre.right != null) break;
                        pre = pre.next;
                    }
                    if(pre != null && tmp.right != null){
                        if(pre.left != null) {
                            tmp.right.next = pre.left;
                        }
                        else{
                            tmp.right.next = pre.right;
                        }
                    }
                    else if(pre != null && tmp.left != null){
                        if(pre.left != null){
                            tmp.left.next = pre.left;
                        }
                        else{
                            tmp.left.next = pre.right;
                        }
                    }
                    tmp = tmp.next;
                }
                else{
                    tmp = tmp.next;
                }
            }
            while(head != null){
                if(head.left != null || head.right != null) break;
                head = head.next;
            }
            if(head != null){
                if(head.left != null){
                    head = head.left;
                }
                else{
                    head = head.right;
                }
            }
        }
        return root;
    }
}
//细心就行
